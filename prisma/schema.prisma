// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cake {
  id             Int           @id @default(autoincrement())
  cake_name      String
  cake_price     Float         @db.Double
  cake_image     String
  best_before    DateTime
  cake_flavour   String
  createdAt      DateTime      @default(now())
  updatesAt      DateTime      @default(now())
  DetailOrder    DetailOrder[]
  composition    Composition[]
}

model Material {
  id             Int            @id @default(autoincrement())
  material_name  String
  material_price Float          @db.Double
  material_type  material_type
  createdAt      DateTime       @default(now())
  updatesAt      DateTime       @default(now())
  compositions   Composition[]
  DetailSupply   DetailSupply[]
}

model Composition {
  id            Int           @id @default(autoincrement())
  cake_id       Int
  material_id   Int
  quantity      Float         @db.Double
  createdAt     DateTime      @default(now())
  updatesAt     DateTime      @default(now())
  cake          Cake         @relation(fields: [cake_id], references: [id])
  material Material @relation(fields: [material_id], references: [id])
}

model Supplier {
  id               Int      @id @default(autoincrement())
  supplier_name    String
  supplier_address String
  supplier_phone   String   @unique
  createdAt        DateTime @default(now())
  updatesAt        DateTime @default(now())
  supplies         Supply[]
}

model Supply {
  id          Int      @id @default(autoincrement())
  supply_date DateTime
  supplier_id Int
  user_id     Int

  createdAt       DateTime       @default(now())
  updatesAt       DateTime       @default(now())
  supplier        Supplier       @relation(fields: [supplier_id], references: [id])
  user            User           @relation(fields: [user_id], references: [id])
  detail_supplies DetailSupply[]
}

model DetailSupply {
  id          Int      @id @default(autoincrement())
  supply_id   Int
  material_id Int
  quantity    Float    @db.Double
  createdAt   DateTime @default(now())
  updatesAt   DateTime @default(now())
  supply      Supply   @relation(fields: [supply_id], references: [id])
  material    Material @relation(fields: [material_id], references: [id])
}

model Order {
  id            Int           @id @default(autoincrement())
  order_date    DateTime
  user_id       Int
  status        status        @default(process)
  createdAt     DateTime      @default(now())
  updatesAt     DateTime      @default(now())
  user          User          @relation(fields: [user_id], references: [id])
  detail_orders DetailOrder[]
}

model DetailOrder {
  id        Int      @id @default(autoincrement())
  order_id  Int
  cake_id   Int
  quantity  Float    @db.Double
  createdAt DateTime @default(now())
  updatesAt DateTime @default(now())
  order     Order    @relation(fields: [order_id], references: [id])
  cake      Cake     @relation(fields: [cake_id], references: [id])
}

model User {
  id            Int      @id @default(autoincrement())
  user_name     String
  user_email    String   @unique
  user_password String
  user_role     role
  token         String?
  createdAt     DateTime @default(now())
  updatesAt     DateTime @default(now())
  supplies      Supply[]
  orders        Order[]
}

enum role {
  cashier
  admin
}

enum status {
  process
  delivered
}

enum material_type {
  powder
  solid
  liquid
}
